set UNIT_TYPES; ##h
set UNITS_ALL; ##i
set UNIT{h in UNIT_TYPES} within UNITS_ALL; ##j

set LAYER_TYPES; ##k
set LAYER_FLOW_DIR; ##k1
set LAYERS_ALL; ##l
set LAYERS{k in LAYER_TYPES,l in LAYERS_ALL, k1 in LAYER_FLOW_DIR} within UNITS_ALL; ##m1


set OBJ_FUNC_TYPES;##n
set OBJ_FUNC{OBJ_FUNC_TYPES} within UNITS_ALL; ##o


##Parameter definition 

param fmin{i in UNITS_ALL};
param fmax{i in UNITS_ALL};
param obj1{n in OBJ_FUNC_TYPES, i in UNITS_ALL};
param obj2{n in OBJ_FUNC_TYPES, i in UNITS_ALL};
param layers_const{k in LAYER_TYPES,l in LAYERS_ALL, k1 in LAYER_FLOW_DIR, i in UNITS_ALL};
param layers_grad{k in LAYER_TYPES,l in LAYERS_ALL, k1 in LAYER_FLOW_DIR, i in UNITS_ALL};

##Variable definition 

var u_rate{i in UNITS_ALL}, >= 0, <= 1000;
var y_onoff{i in UNITS_ALL}, integer, >= 0, <= 1;

##Constraint definition 
s.t. y_onoff_proc{j in UNIT['process']}: y_onoff[j] = 1;
s.t. u_lb_util{i in UNITS_ALL}: y_onoff[i]*fmin[i] - u_rate[i] <= 0;
s.t. u_ub_util{i in UNITS_ALL}: u_rate[i] - y_onoff[i]*fmax[i] <= 0;

s.t. layers_balance{k in LAYER_TYPES, m in LAYERS_ALL}: (sum{m2 in LAYERS[k,m,'in']} (layers_const[k,m,'in',m2]*
						       y_onoff[m2] + layers_grad[k,m,'in',m2]*u_rate[m2])) - (
						       sum{m3 in LAYERS[k,m,'out']} (layers_const[k,m,'out',m3]*
						       y_onoff[m3] + layers_grad[k,m,'out',m3]*u_rate[m3])) = 0;

##Objective function definition

minimize power: sum{n in OBJ_FUNC_TYPES, o in OBJ_FUNC[n]} (y_onoff[o]*obj1[n,o] + u_rate[o]*obj2[n,o]);

data;

set UNIT_TYPES := utility process;
set UNITS_ALL := ch1_1 ch1_2 ch1_3 ch1_4 ch2_1 ch2_2 ch2_3 ch2_4 ch3_1 ch3_2 ch3_3 ch3_4 sp1 sscp ssgv2 sshsb sspfa
	         ssser ssfir sp2 ch1_ret ch2_ret ch3_ret;
set UNIT[utility] := ch1_1 ch1_2 ch1_3 ch1_4 ch2_1 ch2_2 ch2_3 ch2_4 ch3_1 ch3_2 ch3_3 ch3_4 sp1 sscp ssgv2 sshsb 
		      sspfa ssser ssfir sp2;
set UNIT[process] := ch1_ret ch2_ret ch3_ret;

set LAYER_TYPES := balancing_only;
set LAYER_FLOW_DIR := in out;
set LAYERS_ALL := chil2sp1 sp12cp sp12gv2 sp12hsb sp12pfa sp12ser sp12fir ss2sp2 ss22ch1 ss22ch2 ss22ch3;
set LAYERS[balancing_only] := chil2sp1 sp12cp sp12gv2 sp12hsb sp12pfa sp12ser sp12fir ss2sp2 ss22ch1 ss22ch2 
			      ss22ch3;

set LAYERS[balancing_only][chil2sp1] := in out;
set LAYERS[balancing_only][sp12cp] := in out;
set LAYERS[balancing_only][sp12gv2] := in out;
set LAYERS[balancing_only][sp12hsb] := in out;
set LAYERS[balancing_only][sp12pfa] := in out;
set LAYERS[balancing_only][sp12ser] := in out;
set LAYERS[balancing_only][sp12fir] := in out;
set LAYERS[balancing_only][ss2sp2] := in out;
set LAYERS[balancing_only][ss22ch1] := in out;
set LAYERS[balancing_only][ss22ch2] := in out;
set LAYERS[balancing_only][ss22ch3] := in out;

set LAYERS[balancing_only][chil2sp1][in] := ch1_1 ch1_2 ch1_3 ch1_4 ch2_1 ch2_2 ch2_3 ch2_4 ch3_1 ch3_2 ch3_3 ch3_4;
set LAYERS[balancing_only][chil2sp1][out] := sp1;
set LAYERS[balancing_only][sp12cp][in] := sp1;
set LAYERS[balancing_only][sp12cp][out] := sscp;
set LAYERS[balancing_only][sp12gv2][in] := sp1;
set LAYERS[balancing_only][sp12gv2][out] := ssgv2;
set LAYERS[balancing_only][sp12hsb][in] := sp1;
set LAYERS[balancing_only][sp12hsb][out] := sshsb;
set LAYERS[balancing_only][sp12pfa][in] := sp1;
set LAYERS[balancing_only][sp12pfa][out] := sspfa;
set LAYERS[balancing_only][sp12ser][in] := sp1;
set LAYERS[balancing_only][sp12ser][out] := ssser;
set LAYERS[balancing_only][sp12fir][in] := sp1;
set LAYERS[balancing_only][sp12fir][out] := ssfir;
set LAYERS[balancing_only][ss2sp2][in] := sscp ssgv2 sshsb sspfa ssser ssfir;
set LAYERS[balancing_only][ss2sp2][out] := sp2;
set LAYERS[balancing_only][ss22ch1][in] := sp2;
set LAYERS[balancing_only][ss22ch1][out] := ch1_ret;
set LAYERS[balancing_only][ss22ch2][in] := sp2;
set LAYERS[balancing_only][ss22ch2][out] := ch2_ret;
set LAYERS[balancing_only][ss22ch3][in] := sp2;
set LAYERS[balancing_only][ss22ch3][out] := ch3_ret;

set OBJ_FUNC_TYPES := power;
set OBJ_FUNC[power] := ch1_1 ch1_2 ch1_3 ch1_4 ch2_1 ch2_2 ch2_3 ch2_4 ch3_1 ch3_2 ch3_3 ch3_4 sp1 sscp ssgv2 sshsb sspfa
	     	       ssser ssfir sp2 ch1_ret ch2_ret ch3_ret;

param fmin :=
	ch1_1 0 
	ch1_2 0.25 
	ch1_3 0.5 
	ch1_4 0.75 
	ch2_1 0 
	ch2_2 0.25 
	ch2_3 0.5 
	ch2_4 0.75 
	ch3_1 0 
	ch3_2 0.25 
	ch3_3 0.5 
	ch3_4 0.75 
	sp1 0 
	sscp 0 
	ssgv2 0 
	sshsb 0 
	sspfa 0 
	ssser 0 
	ssfir 0 
	sp2 0 
	ch1_ret 1 
	ch2_ret 1 
	ch3_ret 1
;

param fmax := 
	ch1_1 0.25 
	ch1_2 0.5 
	ch1_3 0.75 
	ch1_4 1 
	ch2_1 0.25 
	ch2_2 0.5 
	ch2_3 0.75 
	ch2_4 1 
	ch3_1 0.25 
	ch3_2 0.5 
	ch3_3 0.75 
	ch3_4 1 
	sp1 1 
	sscp 1 
	ssgv2 1 
	sshsb 1 
	sspfa 1 
	ssser 1 
	ssfir 1 
	sp2 1 
	ch1_ret 1 
	ch2_ret 1 
	ch3_ret 1
;

param obj1 :=
	power ch1_1 0.000000
	power ch1_2 23.933993
	power ch1_3 -68.947931
	power ch1_4 -225.794971
	power ch2_1 0.000000
	power ch2_2 279.491578
	power ch2_3 34.470608
	power ch2_4 -367.074916
	power ch3_1 0.000000
	power ch3_2 279.491578
	power ch3_3 34.470608
	power ch3_4 -367.074916
	power sp1 0.000000
	power sscp 0.000000
	power ssgv2 0.000000
	power sshsb 0.000000
	power sspfa 0.000000
	power ssser 0.000000
	power ssfir 0.000000
	power sp2 0.000000
	power ch1_ret 0.000000
	power ch2_ret 0.000000
	power ch3_ret 0.000000
;

param obj2 :=
	power ch1_1 403.944904
	power ch1_2 308.208933
	power ch1_3 493.972780
	power ch1_4 703.102167
	power ch2_1 2027.470328
	power ch2_2 909.504015
	power ch2_3 1399.545956
	power ch2_4 1934.939988
	power ch3_1 2027.470328
	power ch3_2 909.504015
	power ch3_3 1399.545956
	power ch3_4 1934.939988
	power sp1 0.000000
	power sscp 0.000000
	power ssgv2 0.000000
	power sshsb 0.000000
	power sspfa 0.000000
	power ssser 0.000000
	power ssfir 0.000000
	power sp2 0.000000
	power ch1_ret 0.000000
	power ch2_ret 0.000000
	power ch3_ret 0.000000
;

param layers_const :=
		balancing_only chil2sp1 in ch1_1 27.872861
		balancing_only chil2sp1 in ch1_2 27.872861
		balancing_only chil2sp1 in ch1_3 27.872861
		balancing_only chil2sp1 in ch1_4 27.872861
		balancing_only chil2sp1 in ch2_1 128.563570
		balancing_only chil2sp1 in ch2_2 128.563570
		balancing_only chil2sp1 in ch2_3 128.563570
		balancing_only chil2sp1 in ch2_4 128.563570
		balancing_only chil2sp1 in ch3_1 128.563570
		balancing_only chil2sp1 in ch3_2 128.563570
		balancing_only chil2sp1 in ch3_3 128.563570
		balancing_only chil2sp1 in ch3_4 128.563570
		balancing_only sp12cp in sp1 0
		balancing_only sp12gv2 in sp1 0
		balancing_only sp12hsb in sp1 0
		balancing_only sp12pfa in sp1 0
		balancing_only sp12ser in sp1 0
		balancing_only sp12fir in sp1 0
		balancing_only ss2sp2 in sscp 0
		balancing_only ss2sp2 in ssgv2 0.632784448
		balancing_only ss2sp2 in sshsb 0.632784448
		balancing_only ss2sp2 in sspfa 0.632784448
		balancing_only ss2sp2 in ssser 0.632784448
		balancing_only ss2sp2 in ssfir 0
		balancing_only ss22ch1 in sp2 0
		balancing_only ss22ch2 in sp2 0
		balancing_only ss22ch3 in sp2 0;
		balancing_only chil2cp1 out sp1 0
		balancing_only sp12cp out sscp 0
		balancing_only sp12gv2 out ssgv2 0
		balancing_only sp12hsb out sshsb 0	
		balancing_only sp12pfa out sspfa 0
		balancing_only sp12ser out ssser 0
		balancing_only sp12fir out ssfir 0
		balancing_only ss2sp2 out sp2 0;
		balancing_only sp2ch1 out ch1_ret 0
		balancing_only sp2ch2 out ch2_ret 0
		balancing_only sp2ch3 out ch3_ret 0
;

param layers_grad :=
		balancing_only chil2sp1 in ch1_1 -0.819310391
		balancing_only chil2sp1 in ch1_2 -0.819310391
		balancing_only chil2sp1 in ch1_3 -0.819310391
		balancing_only chil2sp1 in ch1_4 -0.819310391
		balancing_only chil2sp1 in ch2_1 -4.894437653
		balancing_only chil2sp1 in ch2_2 -4.894437653
		balancing_only chil2sp1 in ch2_3 -4.894437653
		balancing_only chil2sp1 in ch2_4 -4.894437653
		balancing_only chil2sp1 in ch3_1 -4.894437653
		balancing_only chil2sp1 in ch3_2 -4.894437653
		balancing_only chil2sp1 in ch3_3 -4.894437653
		balancing_only chil2sp1 in ch3_4 -4.894437653
		balancing_only sp12cp in sp1 1000
		balancing_only sp12gv2 in sp1 1000
		balancing_only sp12hsb in sp1 1000
		balancing_only sp12pfa in sp1 1000
		balancing_only sp12ser in sp1 1000
		balancing_only sp12fir in sp1 1000
		balancing_only ss2sp2 in sscp 100
		balancing_only ss2sp2 in ssgv2 299.810165
		balancing_only ss2sp2 in sshsb 199.873443
		balancing_only ss2sp2 in sspfa 199.873443
		balancing_only ss2sp2 in ssser 199.873443
		balancing_only ss2sp2 in ssfir 0
		balancing_only sp2ch1 in sp2 1000
		balancing_only sp2ch2 in sp2 1000
		balancing_only sp2ch3 in sp2 1000
		balancing_only chil2cp1 out sp1 1000
		balancing_only sp12cp out sscp 1000
		balancing_only sp12gv2 out ssgv2 1000
		balancing_only sp12hsb out sshsb 1000	
		balancing_only sp12pfa out sspfa 1000
		balancing_only sp12ser out ssser 1000
		balancing_only sp12fir out ssfir 1000
		balancing_only ss2sp2 out sp2 0;
		balancing_only ss2ch1 out ch1_ret 0
		balancing_only ss2ch2 out ch2_ret 0
		balancing_only ss2ch3 out ch3_ret 0;
;


