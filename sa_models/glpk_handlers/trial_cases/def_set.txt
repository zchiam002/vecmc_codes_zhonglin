set UNIT_TYPES; 
set UNITS_ALL; 
set UNIT{h in UNIT_TYPES} within UNITS_ALL; 

set LAYER_TYPES; 
set LAYERS_ALL; 
set LAYERS{h in LAYER_TYPES} within LAYERS_ALL; 
set LAYERS_DIR_IN{h in LAYERS_ALL} within UNITS_ALL; 
set LAYERS_DIR_OUT{h in LAYERS_ALL} within UNITS_ALL; 
set LAYERS_DIR; 

set ADD_CONS_TYPE; 
set ADD_CONS_SIGN; 
set ADD_CONS_ALL; 
set ADD_CONS_LESS_THAN_EQUAL_TO{h in ADD_CONS_TYPE} within ADD_CONS_ALL; 
set ADD_TERMS_PARENT{h in ADD_CONS_TYPE} within UNITS_ALL; 
set ADD_TERMS{h in ADD_CONS_ALL} within UNITS_ALL; 

set OBJ_FUNC_TYPES; 
set OBJ_FUNC{h in OBJ_FUNC_TYPES} within UNITS_ALL; 

##Parameter definition 

param fmin{h in UNITS_ALL}; 
param fmax{h in UNITS_ALL}; 
param obj1{g in OBJ_FUNC_TYPES, h in UNITS_ALL}; 
param obj2{n in OBJ_FUNC_TYPES, i in UNITS_ALL}; 

param layers_const{g in LAYER_TYPES, h in LAYERS_ALL, i in LAYERS_DIR, j in UNITS_ALL}; 
param layers_grad{g in LAYER_TYPES, h in LAYERS_ALL, i in LAYERS_DIR, j in UNITS_ALL}; 

param add_terms_streams_const{h in ADD_CONS_LESS_THAN_EQUAL_TO['stream_limit']}; 
param add_terms_streams_grad{h in ADD_CONS_LESS_THAN_EQUAL_TO['stream_limit']}; 

param less_than_equal_to_unit_binary{h in ADD_CONS_LESS_THAN_EQUAL_TO['unit_binary']}; 
param less_than_equal_to_unit_binary_terms_coeff{h in ADD_TERMS_PARENT['unit_binary']}; 
param less_than_equal_to_stream_limit{h in ADD_CONS_LESS_THAN_EQUAL_TO['stream_limit']}; 

##Variable definition 

var u_rate{h in UNITS_ALL}, >= 0, <= 1000; 
var y_onoff{i in UNITS_ALL}, integer, >= 0, <= 1; 

##Constraint definition 

s.t. y_onoff_proc{h in UNIT['process']}: y_onoff[h] = 1; 
s.t. u_lb_util{h in UNITS_ALL}: y_onoff[h]*fmin[h] - u_rate[h] <= 0; 
s.t. u_ub_util{h in UNITS_ALL}: u_rate[h] - y_onoff[h]*fmax[h] <= 0; 

s.t. layer_balance{g in LAYER_TYPES, h in LAYERS[g]}: 
(sum i in LAYERS_DIR_IN[h]} (layers_const[g,h,'in',i]*y_onoff[i] + layers_grad[g,h,'in',i]*u_rate[i])) -  
(sum{j in LAYERS_DIR_OUT[h]} (layers_const[g,h,'out',j]*y_onoff[j] + layers_grad[g,h,'out',j]*u_rate[j])) 
= 0; 

s.t. add_cons_ltet_ub{g in ADD_CONS_LESS_THAN_EQUAL_TO['unit_binary']}: 
(sum{h in ADD_TERMS[g]} (y_onoff[h]*less_than_equal_to_unit_binary_terms_coeff[h])) -  
less_than_equal_to_unit_binary[g] <= 0; 

s.t. add_cons_ltet_sl{g in ADD_CONS_LESS_THAN_EQUAL_TO['stream_limit'], h in ADD_TERMS[g]}: 
add_terms_streams_const[g]*y_onoff[h] + add_terms_streams_grad[g]*u_rate[h] - 
less_than_equal_to_stream_limit[g] <= 0; 

##Objective function definition 

minimize power, impact, investment_cost, operation_cost: 
sum{g in OBJ_FUNC_TYPES, h in OBJ_FUNC[g]} (y_onoff[h]*obj1[g,h] + u_rate[h]*obj2[g,h]); 

